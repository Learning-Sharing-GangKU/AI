name: AI CI Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read
  id-token: write  # OIDC for AWS

env:
  AWS_REGION: ap-northeast-2
  ECR_REPO: learning-sharing-gangku/ai

jobs:
  ai-ci:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install deps (if requirements.txt)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip setuptools wheel
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping install."
          fi

      - name: Detect tests
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if python - <<'PY'
import importlib, sys
try:
    importlib.import_module("pytest")
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
          then
            echo "has_pytest=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_pytest=false" >> "$GITHUB_OUTPUT"
          fi
          shopt -s globstar nullglob
          files=(tests/**/*.py **/test_*.py **/*_test.py)
          if [ ${#files[@]} -gt 0 ]; then
            echo "has_tests=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_tests=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run tests (pytest)
        if: steps.detect.outputs.has_pytest == 'true' && steps.detect.outputs.has_tests == 'true'
        run: pytest -q

      # (선택) 패키징: pyproject.toml 있으면 빌드
      - name: Build wheel/sdist (if pyproject)
        if: github.ref == 'refs/heads/main' && hashFiles('pyproject.toml') != ''
        run: |
          pip install build
          python -m build

      # -------- main에서만 ECR 푸시 --------
      - name: Configure AWS credentials (OIDC)
        if: github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183972842:role/GitHubActionsECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != ''
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare image meta
        if: github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != ''
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::7}
          BRANCH_TAG=main-latest
          IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          echo "sha_tag=$SHA_TAG" >> "$GITHUB_OUTPUT"
          echo "branch_tag=$BRANCH_TAG" >> "$GITHUB_OUTPUT"

      - name: Setup Buildx
        if: github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != ''
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (ECR)
        if: github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.sha_tag }}
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.branch_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- main에서만 아티팩트 업로드 --------
      - name: Upload Python dist (main only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ai-dist-${{ github.sha }}
          path: |
            dist/**
          if-no-files-found: ignore
          retention-days: 14
